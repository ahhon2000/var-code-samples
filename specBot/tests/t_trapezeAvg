#!/usr/bin/python3

import os, sys
sys.path = [".", ".."] + [os.path.dirname(os.path.abspath(sys.argv[0]))] + sys.path

from defs import trapezeAvg
from tstcommon import ensure, ensureFloat
from math import log

# Fail on no points, on different sizes of xs, ys, and on unordered arrays

for xs, ys in (
	([], []),
	([], [1, 2]),
	([1, 2], []),
	([1, 2, 3], [4, 5, 6, 7]),
	([1, 1, 3], [1, 2, 3]),
	([3, 2, 1], [0, 0, 0]),
):
	failed = False
	try: trapezeAvg(xs, ys)
	except: failed = True
	ensure(failed, "trapezeAvg() did not fail on a primitive input")

# Simple input

for xs, ys in (
	([0], [0]),
	([1], [100]),
	([3], [15]),
):
	y = trapezeAvg(xs, ys)
	ensureFloat(y, ys[0], "average wrong for two-element input")

for xs, ys in (
	([1, 2], [1, 2]),
	([3, 5], [100, 60]),
):
	y = trapezeAvg(xs, ys)
	ensureFloat(y, (ys[0] + ys[1])/2, "average wrong for two-element input")

# Compare the output against analytical integrals

N = 1000
xs = list(i / N for i in range(N))
for (f, I) in [
	(lambda x: x,  lambda x: x**2 / 2),
	(lambda x: x**2,  lambda x: x**3 / 3),
	(lambda x: 1 / (x + 1),  lambda x: log(x + 1)),
]:
	ys = list(f(x) for x in xs)
	a0 = (I(xs[-1]) - I(xs[0])) / (xs[-1] - xs[0])
	a1 = trapezeAvg(xs, ys)
	ensureFloat(a0, a1, "analytical average %.10f is not equal to computational %.10f" % (a0, a1), precision=1 / N ** 2)
